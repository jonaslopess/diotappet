#!/usr/bin/python
import sys
import time

import csv
import json

import string
import random

import socket

from web3 import Web3, HTTPProvider

SLEEP = 180
PROPERTY = 'Temperature'
PROPERTY_DESCRIPTION = 'Temperature value collected by a mote.'
ROUNDS = 180

#RPC_URL = 'HTTP://127.0.0.1:8545'
CHAIN_ID = 1074
ACCOUNT = '0xded98e256d2C56a801FAa6a26e37F7b0E1c77008'
PRIVATE_KEY = 'adf3ee811fb2e27947232b39f6bbbada559c75ab09f694ad567fc18142341784'

DEVICE_ID = 0
#CONTRACT_ADDRESS = '0xCE681D0a29312bb03992928A2082A8A65AFEE3c4'

CONTRACT_ABI = json.load(open('smart-contract-abi.json'))
CONTRACT_BYTECODE = json.load(open('smart-contract-bytecode.json'))

MAXLEN = 120
UDP_PORT = 3000

# def compile():
	# 1. Import solcx
	# import solcx

	# 2. If you haven't already installed the Solidity compiler, uncomment the following line
	# solcx.install_solc()

	# 3. Compile contract
	# temp_file = solcx.compile_files('Incrementer.sol')

	# 4. Export contract data
	# abi = temp_file['Incrementer.sol:Incrementer']['abi']
	# bytecode = temp_file['Incrementer.sol:Incrementer']['bin']

def deploy_contract(RPC_URL):
	web3 = Web3(HTTPProvider(RPC_URL))
	if(web3.isConnected()):
		try:
			account_from = {
				'private_key': PRIVATE_KEY,
				'address': ACCOUNT,
			}
			contract = web3.eth.contract(abi=CONTRACT_ABI, bytecode=CONTRACT_BYTECODE)
			construct_txn = contract.constructor().buildTransaction(
				{
					'from': account_from['address'],
					'nonce': web3.eth.get_transaction_count(account_from['address']),
					'gasPrice' : web3.toWei('10', 'gwei')
				}
			)
			tx_create = web3.eth.account.sign_transaction(construct_txn, account_from['private_key'])
			tx_hash = web3.eth.send_raw_transaction(tx_create.rawTransaction)
			tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
			print(f"Contract deployed at address: { tx_receipt.contractAddress }")
			
			return tx_receipt.contractAddress
		except:
			print("Error to create SC")
	else:
		print(RPC_URL, "Connection error")

def add_monitoring_capability(RPC_URL, CONTRACT_ADDRESS):
	print("Adding monitoring capability...")
	web3, contract = check_contract(RPC_URL, CONTRACT_ADDRESS)
	if(web3):		
		try:
			start = time.time()
			
			nonce = web3.eth.getTransactionCount(ACCOUNT)
			tx_dict = contract.functions.addMonitoringCpability(
				PROPERTY,
				PROPERTY_DESCRIPTION
			).buildTransaction({
				'chainId' : CHAIN_ID,
				'gas' : 2100000,
				'gasPrice' : web3.toWei('10', 'gwei'),
				'nonce' : nonce,
			})
			signed_tx = web3.eth.account.sign_transaction(tx_dict, PRIVATE_KEY)
			tx_hash = web3.eth.sendRawTransaction(signed_tx.rawTransaction)
			tx_receipt = web3.eth.waitForTransactionReceipt(tx_hash)
			end = time.time()
		
			tx_time = end-start
			value = contract.functions.getMonitoringValue(PROPERTY).call()
			print(f"Add Monitoring Capability, Contract: {CONTRACT_ADDRESS}, Delay: {tx_time: .2f}, {PROPERTY} Value: {value}, Cost(gas): {tx_receipt.gasUsed}")

			with open(''.join(['/xiotvolume/results/contracts.csv']), 'a') as csvfile:
				writer = csv.writer(csvfile, delimiter=',')
				writer.writerow([CONTRACT_ADDRESS, tx_time, value, tx_receipt.gasUsed])

		except:
			print("Error on regitration of a property value.")
	else:
		print("Invalid contract")

def check_contract(RPC_URL, CONTRACT_ADDRESS):
	address = CONTRACT_ADDRESS
	abi = CONTRACT_ABI
	web3 = Web3(HTTPProvider(RPC_URL))
	contract = web3.eth.contract(address=address, abi=abi)
	if contract:
		return (web3, contract)
	else:
		return False

def register(mote, data, RPC_URL, CONTRACT_ADDRESS):
	print("Registering data...")
	web3, contract = check_contract(RPC_URL, CONTRACT_ADDRESS)
	if(web3):
		
		try:
			start = time.time()

			nonce = web3.eth.getTransactionCount(ACCOUNT)
			tx_dict = contract.functions.setMonitoringValue(
				PROPERTY,
				data
			).buildTransaction({
				'chainId' : CHAIN_ID,
				'gas' : 2100000,
				'gasPrice' : web3.toWei('10', 'gwei'),
				'nonce' : nonce,
			})
			signed_tx = web3.eth.account.sign_transaction(tx_dict, PRIVATE_KEY)
			tx_hash = web3.eth.sendRawTransaction(signed_tx.rawTransaction)
			tx_receipt = web3.eth.waitForTransactionReceipt(tx_hash)

			end = time.time()
		
			tx_time = end-start
			value = contract.functions.getMonitoringValue(PROPERTY).call()

			return [tx_time, value, tx_receipt.gasUsed]

		except:
			print("Error on regitration of a property value.")
			return [0, 0, 0]
	else:
		print("Invalid contract")
		return [-1, -1, -1]


def main():
	if len(sys.argv) != 10:
		print(sys.argv)
		usage()
	else:
		echotester()

def usage():
    sys.stdout = sys.stderr
    print('Usage: ipv6-echo-tester client clientrouter motes gateways gatewayrouters datasize requests timeout rpc')
    sys.exit(2) 

def echotester():
	#SRC_CLIENT = int(sys.argv[1])
	#SRC_CLIENTROUTER = int(sys.argv[2])
	DST_GATEWAY = sys.argv[1]
	DST_GATEWAYROUTER = sys.argv[2]
	MOTES = int(sys.argv[3])
	GATEWAYS = int(sys.argv[4])
	GATEWAYROUTERS = int(sys.argv[5])
	DATASIZE = int(sys.argv[6])	
	REQUESTS = int(sys.argv[7])
	TIMEOUT = int(sys.argv[8])
	RPC_URL = sys.argv[9]
	
	print("RPC_URL: ",RPC_URL)
	
	CONTRACT_ADDRESS = deploy_contract(RPC_URL)
	add_monitoring_capability(RPC_URL, CONTRACT_ADDRESS)

	if  not check_contract(RPC_URL,CONTRACT_ADDRESS):
		print("Contract problem. Exiting...")
		return
	
	REQ = 0
	INITIAL = time.time()
	
	while REQ < REQUESTS:
		try:
			REQ = REQ + 1
			#DST_GATEWAYROUTER = str(random.randint(1,GATEWAYROUTERS))
			#DST_GATEWAY = str(random.randint(1,GATEWAYS))
			DST_MOTE = str('{:x}'.format(random.randint(2, MOTES + 1)))
				
			HOSTNAME = DST_MOTE+"."+DST_GATEWAY+"."+DST_GATEWAYROUTER
			
			print("Time = ", time.time()-INITIAL)

			print(HOSTNAME)
			
			text = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(DATASIZE))
			text = text.encode('utf-8')
			latency = time.time() * 1000	
			
			UDP_IP = "aaaa:"+DST_GATEWAYROUTER+":"+DST_GATEWAY+"::212:740"+DST_MOTE+":"+DST_MOTE+":"+DST_MOTE+"0"+DST_MOTE
			
			udpsock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM) # UDP
			udpsock.settimeout(TIMEOUT)
			print(REQ, " : sending" , len(text), "bytes to", UDP_IP,"\n",HOSTNAME,":", text)
			udpsock.sendto(text, (UDP_IP, UDP_PORT))
			print("waiting for udp-data")
			latency = time.time() * 1000
				
			data, addr = udpsock.recvfrom(120)
			
			latency = (time.time() * 1000) - latency
			print("received", len(data), "bytes from", addr, ":", data)

			random_value = random.randint(-2,2)

			sc_results = register(DST_MOTE, random_value, RPC_URL, CONTRACT_ADDRESS)

			print("latency: %d ms" % latency )
		
			if data == text:
				print("success")
				result = "success"
			else:
				print("data error")
				result = "data error"
				
			fields = [DST_MOTE,DST_GATEWAY,DST_GATEWAYROUTER,time.time()-INITIAL,"%d" % latency,*sc_results,result]
			
			with open(r'/diotappet/clientslog.csv', 'a') as f:
				writer = csv.writer(f, delimiter=';')
				writer.writerow(fields)

			print(" ")
			time.sleep(1)

		except socket.timeout:	
			latency = (time.time() * 1000) - latency
			print("udp-timeout")
			result = "udp error"
			fields = [DST_MOTE,DST_GATEWAY,DST_GATEWAYROUTER,time.time()-INITIAL,"%d" % latency,result]
			with open(r'/diotappet/clientslog.csv', 'a') as f:
				writer = csv.writer(f, delimiter=';')
				writer.writerow(fields)
main()

