#!/usr/bin/python
import sys
import time

import csv
import json

import string
import random

import socket

from web3 import Web3, HTTPProvider

SLEEP = 180
PROPERTY = 'Temperature'
PROPERTY_DESCRIPTION = 'Temperature value collected by a mote.'
ROUNDS = 180

#RPC_URL = 'HTTP://127.0.0.1:8545'
CHAIN_ID = 1074

#ACCOUNT = '0x8366B08c3C2a4c881a3d3610349eEf67f9a137ab'
#PRIVATE_KEY = '3d2d17463ba0f20b9ca1b991971fdcffe07dce7c7ae38cd3ae3dae1039a8a4ec'

OWNER_ACCOUNT = '0xded98e256d2C56a801FAa6a26e37F7b0E1c77008'
OWNER_PRIVATE_KEY = 'adf3ee811fb2e27947232b39f6bbbada559c75ab09f694ad567fc18142341784'

DEVICE_ID = 0
#CONTRACT_ADDRESS = '0xCE681D0a29312bb03992928A2082A8A65AFEE3c4'

CONTRACT_ABI = json.load(open('smart-contract-abi.json'))
CONTRACT_BYTECODE = json.load(open('smart-contract-bytecode.json'))

MANAGEMENT_ABI = json.load(open('management-abi.json'))

MAXLEN = 120
UDP_PORT = 3000

# def compile():
	# 1. Import solcx
	# import solcx

	# 2. If you haven't already installed the Solidity compiler, uncomment the following line
	# solcx.install_solc()

	# 3. Compile contract
	# temp_file = solcx.compile_files('Incrementer.sol')

	# 4. Export contract data
	# abi = temp_file['Incrementer.sol:Incrementer']['abi']
	# bytecode = temp_file['Incrementer.sol:Incrementer']['bin']

def register_contract(web3, management, gw, gwr, contract_address):
	print("Registering contract...")
	if(web3):		
		try:
			start = time.time()
			nonce = web3.eth.getTransactionCount(OWNER_ACCOUNT)
			print("Nonce:", nonce)
			tx_dict = management.functions.addLogisticsResource(
				(gw+gwr),
				"Registering contract to "+(gw+gwr),
				contract_address
			).buildTransaction({
				'chainId' : CHAIN_ID,
				'gas' : 100000,
				'gasPrice' : web3.toWei('10', 'gwei'),
				'nonce' : nonce,
			})
			signed_tx = web3.eth.account.sign_transaction(tx_dict, OWNER_PRIVATE_KEY)
			tx_hash = web3.eth.send_raw_transaction(signed_tx.rawTransaction)
			tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)

			end = time.time()
		
			tx_time = end-start

			return [tx_time, tx_receipt.gasUsed]

		except:
			print("Error on regitration of a property value.")
			return [0, 0, 0]
	else:
		print("Invalid contract")
		return [-1, -1, -1]


def deploy_contract(web3, account, private_key):
	try:
		account_from = {
			'private_key': private_key,
			'address': account,
		}
		contract = web3.eth.contract(abi=CONTRACT_ABI, bytecode=CONTRACT_BYTECODE)
		construct_txn = contract.constructor().buildTransaction(
			{
				'from': account_from['address'],
				'nonce': web3.eth.get_transaction_count(account_from['address']),
				'gasPrice' : web3.toWei('10', 'gwei')
			}
		)
		tx_create = web3.eth.account.sign_transaction(construct_txn, account_from['private_key'])
		tx_hash = web3.eth.send_raw_transaction(tx_create.rawTransaction)
		tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
		print(f"Contract deployed at address: { tx_receipt.contractAddress }")
		
		return tx_receipt.contractAddress
	except:
		print("Error to create SC")
		return False

def add_monitoring_capability(web3, contract, account, private_key):
	print("Adding monitoring capability...")
	if(web3):		
		try:
			start = time.time()
			
			nonce = web3.eth.getTransactionCount(account)
			tx_dict = contract.functions.addMonitoringCpability(
				PROPERTY,
				PROPERTY_DESCRIPTION
			).buildTransaction({
				'chainId' : CHAIN_ID,
				'gas' : 2100000,
				'gasPrice' : web3.toWei('10', 'gwei'),
				'nonce' : nonce,
			})
			signed_tx = web3.eth.account.sign_transaction(tx_dict, private_key)
			tx_hash = web3.eth.send_raw_transaction(signed_tx.rawTransaction)
			tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
			end = time.time()
		
			tx_time = end-start
			value = contract.functions.getMonitoringValue(PROPERTY).call()
			print(f"Add Monitoring Capability, Contract: {contract.address}, Delay: {tx_time: .2f}, {PROPERTY} Value: {value}, Cost(gas): {tx_receipt.gasUsed}")

			with open(''.join(['/xiotvolume/results/contracts.csv']), 'a') as csvfile:
				writer = csv.writer(csvfile, delimiter=',')
				writer.writerow([contract.address, tx_time, value, tx_receipt.gasUsed])

		except:
			print("Error on regitration of a property value.")
	else:
		print("Invalid contract")

def check_contract(web3, address, abi):
	contract = web3.eth.contract(address=address, abi=abi)
	if contract:
		return (contract)
	else:
		return False

def register(mote, data, web3, contract, account, private_key):
	print("Registering data...")
	if(web3):
		
		try:
			start = time.time()

			nonce = web3.eth.getTransactionCount(account)
			print("Nonce:", nonce)
			tx_dict = contract.functions.setMonitoringValue(
				#PROPERTY,
				data
			).buildTransaction({
				'chainId' : CHAIN_ID,
				'gas' : 100000,
				'gasPrice' : web3.toWei('10', 'gwei'),
				'nonce' : nonce,
			})
			signed_tx = web3.eth.account.sign_transaction(tx_dict, private_key)
			tx_hash = web3.eth.send_raw_transaction(signed_tx.rawTransaction)
			tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)

			end = time.time()
		
			tx_time = end-start
			#value = contract.functions.getMonitoringValue(PROPERTY).call()
			value = contract.functions.getMonitoringValue().call()

			return [tx_time, value, tx_receipt.gasUsed]

		except:
			print("Error on regitration of a property value.")
			return [0, 0, 0]
	else:
		print("Invalid contract")
		return [-1, -1, -1]


def transfer_funds(web3, account):	
	try:
		tx = {
			'nonce': web3.eth.get_transaction_count(OWNER_ACCOUNT),
			'to': account,
			'value': web3.toWei(1, 'ether'),
			'gas': 2000000,
			'gasPrice': web3.toWei('10', 'gwei')
		}
		signed_txn = web3.eth.account.sign_transaction(tx, OWNER_PRIVATE_KEY)

		tx_hash = web3.eth.send_raw_transaction(signed_txn.rawTransaction)
		tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)

		owner_balance = web3.eth.get_balance(OWNER_ACCOUNT)
		account_balance = web3.eth.get_balance(account)

		print("owner_balance: ", owner_balance)
		print("account_balance: ", account_balance)

		return True
	
	except:
		print("Error during funds transfering...")
		return False
	
def create_account():
	from eth_account import Account
	import secrets
	priv = secrets.token_hex(32)
	private_key = "0x" + priv
	print ("Private Key:", private_key)
	acct = Account.from_key(private_key)
	print("Address:", acct.address) 
	return acct.address, private_key

def echotester():
	DST_GATEWAY = sys.argv[1]
	DST_GATEWAYROUTER = sys.argv[2]
	MOTES = int(sys.argv[3])
	DATASIZE = int(sys.argv[4])	
	REQUESTS = int(sys.argv[5])
	TIMEOUT = int(sys.argv[6])
	RPC_URL = sys.argv[7]
	MANAGEMENT_ADDRESS = sys.argv[8]

	print("RPC_URL: ",RPC_URL)
	account, private_key = create_account()

	web3 = Web3(HTTPProvider(RPC_URL))

	if(not web3.isConnected()):
		print(RPC_URL, "Connection error. Exiting...")
		return

	trying = 0
	while (not transfer_funds(web3, account) and (trying < 5)):
		print("Trying transfer funds again...")
		trying += 1
	
	if trying >= 5:
		print("Funds transfer problem. Exiting...")
		return

	contract_address = False
	trying = 0

	while (not contract_address) and (trying < 5):
		trying += 1
		print("Contract creation problem. Trying again...", trying)
		contract_address = deploy_contract(web3, account, private_key)

	if trying >= 5:
		print("Contract creation problem. Exiting...")
		return

	contract = check_contract(web3, contract_address, CONTRACT_ABI)

	if not contract:
		print("Contract problem. Exiting...")
		return
	
	management = check_contract(web3, MANAGEMENT_ADDRESS, MANAGEMENT_ABI)

	if not management:
		print("Management contract problem. Exiting...")
		return
	
	register_contract(web3, management, DST_GATEWAY, DST_GATEWAYROUTER, contract_address)

	#add_monitoring_capability(web3, contract, account, private_key)
	
	REQ = 0
	INITIAL = time.time()
	
	while REQ < REQUESTS:
		try:
			REQ = REQ + 1
			#DST_GATEWAYROUTER = str(random.randint(1,GATEWAYROUTERS))
			#DST_GATEWAY = str(random.randint(1,GATEWAYS))
			DST_MOTE = str('{:x}'.format(random.randint(2, MOTES + 1)))
				
			HOSTNAME = DST_MOTE+"."+DST_GATEWAY+"."+DST_GATEWAYROUTER
			
			print("Time = ", time.time()-INITIAL)

			print(HOSTNAME)
			
			text = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(DATASIZE))
			text = text.encode('utf-8')
			latency = time.time() * 1000	
			
			UDP_IP = "aaaa:"+DST_GATEWAYROUTER+":"+DST_GATEWAY+"::212:740"+DST_MOTE+":"+DST_MOTE+":"+DST_MOTE+"0"+DST_MOTE
			
			udpsock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM) # UDP
			udpsock.settimeout(TIMEOUT)
			print(REQ, " : sending" , len(text), "bytes to", UDP_IP,"\n",HOSTNAME,":", text)
			udpsock.sendto(text, (UDP_IP, UDP_PORT))
			print("waiting for udp-data")
			latency = time.time() * 1000
				
			data, addr = udpsock.recvfrom(120)
			
			latency = (time.time() * 1000) - latency
			print("received", len(data), "bytes from", addr, ":", data)

			random_value = random.randint(-2,2)

			sc_results = register(DST_MOTE, random_value, web3, contract, account, private_key)

			print("latency: %d ms" % latency )
		
			if data == text:
				print("success")
				result = "success"
			else:
				print("data error")
				result = "data error"
				
			fields = [DST_MOTE,DST_GATEWAY,DST_GATEWAYROUTER,time.time()-INITIAL,"%d" % latency,*sc_results,result]
			
			with open(r'/diotappet/clientslog.csv', 'a') as f:
				writer = csv.writer(f, delimiter=';')
				writer.writerow(fields)

			print(" ")
			time.sleep(1)

		except socket.timeout:	
			latency = (time.time() * 1000) - latency
			print("udp-timeout")
			result = "udp error"
			fields = [DST_MOTE,DST_GATEWAY,DST_GATEWAYROUTER,time.time()-INITIAL,"%d" % latency,result]
			with open(r'/diotappet/clientslog.csv', 'a') as f:
				writer = csv.writer(f, delimiter=';')
				writer.writerow(fields)

def main():
	if len(sys.argv) != 9:
		print(sys.argv)
		usage()
	else:
		echotester()

def usage():
    sys.stdout = sys.stderr
    print('Usage: ipv6-echo-tester gateway gatewayrouter motes datasize requests timeout rpc management')
    sys.exit(2)

if __name__== "__main__":
	main()